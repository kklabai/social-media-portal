version: '3.8'
services:
  social-media-portal:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: social-media-portal
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - HOSTNAME=0.0.0.0
      - DATABASE_URL=file:/app/data/prod.db
      - NANDI_SSO_URL=${NANDI_SSO_URL}
      - NANDI_APP_ID=${NANDI_APP_ID}
      - NANDI_RETURN_URL=${NANDI_RETURN_URL}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXT_PUBLIC_AUTH_URL=${NEXT_PUBLIC_AUTH_URL}
      - NEXT_PUBLIC_BASE_URL=${NEXT_PUBLIC_BASE_URL}
    volumes:
      - ./data:/app/data
      - ./uploads:/app/uploads
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: Backup service (keeping this as it's useful)
  backup:
    image: alpine:latest
    container_name: social-media-backup
    volumes:
      - ./data:/data:ro
      - ./backups:/backups
    environment:
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
    command: >
      sh -c "
      apk add --no-cache sqlite tar &&
      echo '${BACKUP_SCHEDULE} cd /backups && sqlite3 /data/prod.db \".backup backup-\$$(date +%Y%m%d-%H%M%S).db\" && find /backups -name \"backup-*.db\" -mtime +7 -delete' | crontab - &&
      crond -f
      "
    restart: unless-stopped
